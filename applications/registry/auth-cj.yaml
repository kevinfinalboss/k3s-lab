apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-config-sa
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: registry-config-role
rules:
- apiGroups: [""]
  resources: ["namespaces", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: registry-config-binding
subjects:
- kind: ServiceAccount
  name: registry-config-sa
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: registry-config-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: registry-auth-setup
  namespace: kube-system
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: registry-config-sa
          containers:
          - name: kubectl
            image: amazon/aws-cli:latest
            env:
            - name: LOCAL_REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: local-registry-credentials
                  key: password
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: ecr-registry-credentials
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: ecr-registry-credentials
                  key: secret-access-key
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: ecr-registry-credentials
                  key: region
            - name: ECR_REGISTRY_URL
              valueFrom:
                secretKeyRef:
                  name: ecr-registry-credentials
                  key: registry-url
            command:
            - /bin/bash
            - -c
            - |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/
              
              echo "Obtendo lista de namespaces..."
              NAMESPACES=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')
              
              LOCAL_DOCKER_SERVER="registry.kevindev.com.br"
              LOCAL_DOCKER_USERNAME="kgomes-adm"
              LOCAL_DOCKER_EMAIL="kevinmg50@gmail.com"
              
              echo "Obtendo token do ECR..."
              ECR_TOKEN=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)
              
              if [ -z "$ECR_TOKEN" ]; then
                echo "Erro: Não foi possível obter token do ECR"
                exit 1
              fi
              
              for ns in $NAMESPACES; do
                echo "Processando namespace: $ns"
                
                if [ "$ns" = "default" ]; then
                  echo "Pulando namespace default"
                  continue
                fi
                
                echo "Criando dockerconfig.json combinado para namespace: $ns"
                
                LOCAL_AUTH=$(echo -n "$LOCAL_DOCKER_USERNAME:$LOCAL_REGISTRY_PASSWORD" | base64 -w 0)
                ECR_AUTH=$(echo -n "AWS:$ECR_TOKEN" | base64 -w 0)
                
                cat > /tmp/dockerconfig.json <<'DOCKERCONFIG'
              {
                "auths": {
                  "PLACEHOLDER_LOCAL_SERVER": {
                    "username": "PLACEHOLDER_LOCAL_USERNAME",
                    "password": "PLACEHOLDER_LOCAL_PASSWORD",
                    "email": "PLACEHOLDER_LOCAL_EMAIL",
                    "auth": "PLACEHOLDER_LOCAL_AUTH"
                  },
                  "PLACEHOLDER_ECR_URL": {
                    "username": "AWS",
                    "password": "PLACEHOLDER_ECR_TOKEN",
                    "email": "no-reply@amazonaws.com",
                    "auth": "PLACEHOLDER_ECR_AUTH"
                  }
                }
              }
              DOCKERCONFIG
                
                sed -i "s|PLACEHOLDER_LOCAL_SERVER|$LOCAL_DOCKER_SERVER|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_LOCAL_USERNAME|$LOCAL_DOCKER_USERNAME|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_LOCAL_PASSWORD|$LOCAL_REGISTRY_PASSWORD|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_LOCAL_EMAIL|$LOCAL_DOCKER_EMAIL|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_LOCAL_AUTH|$LOCAL_AUTH|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_ECR_URL|$ECR_REGISTRY_URL|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_ECR_TOKEN|$ECR_TOKEN|g" /tmp/dockerconfig.json
                sed -i "s|PLACEHOLDER_ECR_AUTH|$ECR_AUTH|g" /tmp/dockerconfig.json
                
                kubectl create secret generic regcred \
                  --from-file=.dockerconfigjson=/tmp/dockerconfig.json \
                  --type=kubernetes.io/dockerconfigjson \
                  --namespace="$ns" \
                  --dry-run=client -o yaml | kubectl apply -f -
                
                if kubectl get serviceaccount default -n $ns &>/dev/null; then
                  if ! kubectl get serviceaccount default -n $ns -o json | grep -q '"name": "regcred"'; then
                    echo "Atualizando ServiceAccount default no namespace: $ns"
                    kubectl patch serviceaccount default -n $ns -p '{"imagePullSecrets":[{"name":"regcred"}]}'
                  else
                    echo "ServiceAccount default já está configurada no namespace: $ns"
                  fi
                else
                  echo "ServiceAccount default não encontrada no namespace: $ns"
                fi
                
                rm -f /tmp/dockerconfig.json
              done
              
              echo "Configuração de registries concluída para todos os namespaces em: $(date)"
          restartPolicy: OnFailure